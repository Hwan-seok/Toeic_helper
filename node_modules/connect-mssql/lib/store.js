// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var sql,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  sql = require('mssql');

  module.exports = function(session) {
    var MSSQLStore, Store, ref;
    Store = (ref = session.Store) != null ? ref : session.session.Store;
    MSSQLStore = (function(superClass) {
      extend(MSSQLStore, superClass);

      MSSQLStore.prototype.table = '[sessions]';

      MSSQLStore.prototype.ttl = 1000 * 60 * 60 * 24;

      MSSQLStore.prototype.autoRemove = 'never';

      MSSQLStore.prototype.autoRemoveInterval = 1000 * 60 * 10;

      MSSQLStore.prototype.autoRemoveCallback = void 0;

      MSSQLStore.prototype.useUTC = true;


      /*
      		Initialize MSSQLStore with the given `options`.
      		
      		@param {Object} config
      		@param {Object} [options]
       */

      function MSSQLStore(config, options) {
        var database, name, ref1, ref2, schema;
        if (options) {
          if (options.table) {
            ref1 = sql.Table.parseName(options.table), name = ref1.name, schema = ref1.schema, database = ref1.database;
            this.table = "" + (database ? "[" + database + "]." : "") + (schema ? "[" + schema + "]." : "") + "[" + name + "]";
          }
          if (options.ttl) {
            this.ttl = options.ttl;
          }
          if (options.autoRemove) {
            this.autoRemove = options.autoRemove;
          }
          if (options.autoRemoveInterval) {
            this.autoRemoveInterval = options.autoRemoveInterval;
          }
          if (options.autoRemoveCallback) {
            this.autoRemoveCallback = options.autoRemoveCallback;
          }
        }
        if (((ref2 = config.options) != null ? ref2.useUTC : void 0) != null) {
          this.useUTC = config.options.useUTC;
        }
        this.connection = new sql.Connection(config);
        this.connection.on('connect', this.emit.bind(this, 'connect'));
        this.connection.on('error', this.emit.bind(this, 'error'));
        this.connection.connect().then((function(_this) {
          return function() {
            if (_this.autoRemove === 'interval') {
              _this.destroyExpired();
              return setInterval(_this.destroyExpired.bind(_this), _this.autoRemoveInterval);
            }
          };
        })(this));
      }

      MSSQLStore.prototype._ready = function(callback) {
        if (this.connection.connected) {
          return callback.call(this);
        }
        if (this.connection.connecting) {
          return this.connection.once('connect', callback.bind(this));
        }
        return callback.call(this, new Error("Connection is closed."));
      };


      /*
      		Attempt to fetch session by the given `sid`.
      		
      		@param {String} sid
      		@callback callback
       */

      MSSQLStore.prototype.get = function(sid, callback) {
        return this._ready(function(err) {
          var request;
          if (err) {
            return callback(err);
          }
          request = this.connection.request();
          request.input('sid', sid);
          return request.query("select session from " + this.table + " where sid = @sid", function(err, recordset) {
            if (err) {
              return callback(err);
            }
            if (recordset.length) {
              return callback(null, JSON.parse(recordset[0].session));
            }
            return callback(null, null);
          });
        });
      };


      /*
      		Commit the given `sess` object associated with the given `sid`.
      		
      		@param {String} sid
      		@param {Object} data
      		@callback callback
       */

      MSSQLStore.prototype.set = function(sid, data, callback) {
        return this._ready(function(err) {
          var expires, ref1, ref2, ref3, request;
          if (err) {
            return callback(err);
          }
          expires = new Date((ref1 = (ref2 = data.cookie) != null ? ref2.expires : void 0) != null ? ref1 : Date.now() + this.ttl);
          request = this.connection.request();
          request.input('sid', sid);
          request.input('session', JSON.stringify(data));
          request.input('expires', expires);
          if ((ref3 = this.connection.config.options.tdsVersion) === '7_1' || ref3 === '7_2') {
            return request.query("update " + this.table + " set session = @session, expires = @expires where sid = @sid;if @@rowcount = 0 begin insert into " + this.table + " (sid, session, expires) values (@sid, @session, @expires) end;", callback);
          } else {
            return request.query("merge into " + this.table + " with (holdlock) s using (values(@sid, @session)) as ns (sid, session) on (s.sid = ns.sid) when matched then update set s.session = @session, s.expires = @expires when not matched then insert (sid, session, expires) values (@sid, @session, @expires);", callback);
          }
        });
      };


      /*
      		Update expiration date of the given `sid`.
      		
      		@param {String} sid
      		@param {Object} data
      		@callback callback
       */

      MSSQLStore.prototype.touch = function(sid, data, callback) {
        return this._ready(function(err) {
          var expires, ref1, ref2, request;
          if (err) {
            return callback(err);
          }
          expires = new Date((ref1 = (ref2 = data.cookie) != null ? ref2.expires : void 0) != null ? ref1 : Date.now() + this.ttl);
          request = this.connection.request();
          request.input('sid', sid);
          request.input('expires', expires);
          return request.query("update " + this.table + " set expires = @expires where sid = @sid", callback);
        });
      };


      /*
      		Destroy the session associated with the given `sid`.
      		
      		@param {String} sid
      		@callback callback
       */

      MSSQLStore.prototype.destroy = function(sid, callback) {
        return this._ready(function(err) {
          var request;
          if (err) {
            return callback(err);
          }
          request = this.connection.request();
          request.input('sid', sid);
          return request.query("delete from " + this.table + " where sid = @sid", callback);
        });
      };


      /*
      		Destroy expired sessions.
       */

      MSSQLStore.prototype.destroyExpired = function(callback) {
        return this._ready(function(err) {
          var base, request;
          if (err) {
            return typeof (base = callback != null ? callback : this.autoRemoveCallback) === "function" ? base(err) : void 0;
          }
          request = this.connection.request();
          return request.query("delete from " + this.table + " where expires <= get" + (this.useUTC ? "utc" : "") + "date()", callback != null ? callback : this.autoRemoveCallback);
        });
      };


      /*
      		Fetch number of sessions.
      		
      		@callback callback
       */

      MSSQLStore.prototype.length = function(callback) {
        return this._ready(function(err) {
          var request;
          if (err) {
            return callback(err);
          }
          request = this.connection.request();
          return request.query("select count(sid) as length from " + this.table, function(err, recordset) {
            if (err) {
              return callback(err);
            }
            return callback(null, recordset[0].length);
          });
        });
      };


      /*
      		Clear all sessions.
      		
      		@callback callback
       */

      MSSQLStore.prototype.clear = function(callback) {
        return this._ready(function(err) {
          var request;
          if (err) {
            return callback(err);
          }
          request = this.connection.request();
          return request.query("truncate table " + this.table, callback);
        });
      };

      return MSSQLStore;

    })(Store);
    return MSSQLStore;
  };

}).call(this);
